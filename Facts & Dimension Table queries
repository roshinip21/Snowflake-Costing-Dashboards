SELECT
    DISTINCT warehouse_name,
    NULL AS Product
FROM
    snowflake.account_usage.warehouse_events_history;
    
UPDATE
    MX_PRD.SNF_TEST.WAREHOUSE_PRODUCT
SET
    Product = 'AI/ML'
WHERE
    WAREHOUSE LIKE 'WH_SAAS_AIML_ACCESS_LIGHT%';

    
select
    distinct warehouse_name
from
    snowflake.account_usage.warehouse_events_history;
    ------------------------------------------------
    
    CREATE
    OR REPLACE TABLE MX_PRD.SNF_TEST.PRODUCT (
        Product STRING,
        Product_Description STRING
    );

    

    

SELECT
    w.warehouse,
    w.product,
    p.product_description
from
    warehouse_product w,
    product p
WHERE
    p.product = w.product;

    
select
    *
from
    MX_PRD.SNF_TEST.vw_wh_product;

    
CREATE VIEW WAREHOUSE_RPADMANABHA.SNOWFLAKE_COSTS.VW_Wh_Credits_Usage AS


SELECT
    *
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY;

    
select
    *
from
    WAREHOUSE_RPADMANABHA.SNOWFLAKE_COSTS.VW_Wh_Credits_Usage;

    
// Views for Various dimensions


Use database warehouse_rpadmanabha;

Use schema snowflake_costs;

//Warehouse costs view, Fact Table: WAREHOUSE_METERING_HISTORY, Dimension: (Itself)
    // group by - day : casted the date to day
    
    
CREATE VIEW VW_WAREHOUSE_COSTS AS
SELECT
    WAREHOUSE_NAME,
    CAST(DATE_TRUNC('day', START_TIME) AS DATE) AS usage_start_date,
    SUM(CREDITS_USED) AS total_credits_used
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
GROUP BY
    WAREHOUSE_NAME,
    usage_start_date;

    
select
    *
from
    WAREHOUSE_RPADMANABHA.SNOWFLAKE_COSTS.VW_WAREHOUSE_COSTS
LIMIT
    5;
//Query Dimension costs view,
    //Fact Table: QUERY_HISTORY, Dimension Table: WAREHOUSE_METERING_HISTORY
    // duration , format -Q.CREDITS_USED_CLOUD_SERVICES - 9 decimals

    
    select
    *
from
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY Q
LIMIT
    5;

    
CREATE VIEW VW_QUERY_COSTS AS
SELECT
    Q.QUERY_ID,
    Q.WAREHOUSE_NAME,
    Q.START_TIME,
    Q.END_TIME,
    TIMESTAMPDIFF('seconds', Q.START_TIME, Q.END_TIME) AS QUERY_DURATION,
    -- Calculating duration in seconds
    Q.QUERY_TEXT,
    ROUND(Q.CREDITS_USED_CLOUD_SERVICES, 9) AS CREDITS_USED_CLOUD_SERVICES -- Formatting to 9 decimal places
FROM
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY Q
    JOIN SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY W ON Q.WAREHOUSE_ID = W.WAREHOUSE_ID
WHERE
    Q.WAREHOUSE_NAME IS NOT NULL;
    //AND QUERY_DURATION <> 0 LIMIT 5;

    
select
    *
from
    WAREHOUSE_RPADMANABHA.SNOWFLAKE_COSTS.VW_QUERY_COSTS
LIMIT
    5;
// Storage Usage costs view Fact Table: DATABASE_STORAGE_USAGE or SCHEMA_STORAGE_USAGE
    // Dimension Table: None (Database and schema are usually dimensions themselves)
    // ratio of customer % in the bill,  Costs 2 cents per GB per month.
    
select
    *
FROM
    VW_DATABASE_STORAGE_COSTS
limit
    5;
    
CREATE VIEW VW_DATABASE_STORAGE_COSTS AS
SELECT
    DATABASE_NAME,
    CAST(DATE_TRUNC('day', USAGE_DATE) AS DATE) AS usage_date,
    SUM(AVERAGE_DATABASE_BYTES) AS average_bytes_used,
    ROUND(
        SUM(AVERAGE_DATABASE_BYTES) / (1024 * 1024 * 1024),
        4
    ) AS average_gb_used,
    (average_gb_used * 2.053) / 100 dollars_per_month -- 2 cents per GB
    //CAST(0 AS NUMBER) AS credits_used  -- Added a column for credits_used and cast it to 0
FROM
    SNOWFLAKE.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY
GROUP BY
    DATABASE_NAME,
    usage_date;

    
select
    *
from
    WAREHOUSE_RPADMANABHA.SNOWFLAKE_COSTS.VW_DATABASE_STORAGE_COSTS
LIMIT
    5;

    
DROP VIEW VW_DATABASE_STORAGE_COSTS;
// Table Dimension Data Costs Views
    // Fact Table: TABLE_STORAGE_METRICS,Dimension Table: None (Table is usually a dimension itself)
    // 1st column - bytes to MB , 2nd column - Costs 2 cents per GB per month.

    
select
    *
FROM
    SNOWFLAKE.ACCOUNT_USAGE.TABLE_STORAGE_METRICS;
// WHERE ACTIVE_BYTES is not null
LIMIT
    5;
    
    
CREATE VIEW VW_TABLE_STORAGE_COSTS AS
SELECT
    TABLE_SCHEMA,
    TABLE_NAME,
    CAST(DATE_TRUNC('day', TABLE_CREATED) as DATE) AS TABLE_CREATED_DATE,
    ACTIVE_BYTES AS active_bytes_used,
    ROUND(SUM(active_bytes) / (1024 * 1024 * 1024), 4) AS Active_GigaBytes_used,
    (active_bytes * 2) / 100 dollars_per_month
FROM
    SNOWFLAKE.ACCOUNT_USAGE.TABLE_STORAGE_METRICS
WHERE
    ACTIVE_BYTES IS NOT NULL
GROUP BY
    TABLE_SCHEMA,
    TABLE_NAME,
    TABLE_CREATED_DATE,
    ACTIVE_BYTES;
DROP VIEW VW_TABLE_STORAGE_COSTS;
select
    *
from
    storage_usage;
// Calculating Table Storage Costs for Customers in Prod Environment
    // This query will return the total storage bytes used by each customer in the 'prod' environment, which can be used as a proxy for the storage cost.
select
    *
from
    WAREHOUSE_RPADMANABHA.SNOWFLAKE_COSTS.VW_TABLE_STORAGE_COSTS
LIMIT
    5;
    /* Generated by Snowflake Copilot */
SELECT
    storage_usage.reader_account_name AS customer,
    SUM(storage_usage.storage_bytes) AS total_storage_bytes
FROM
    storage_usage
    --WHERE
    --storage_usage.reader_account_name ILIKE '%prod%'
GROUP BY
    storage_usage.reader_account_name;
select
    *
from
    storage_usage;
select
    *
from
    SNOWFLAKE.ACCOUNT_USAGE.TABLE_STORAGE_METRICS;

-- 2. Control loop to process all tables

// 2 hr = 195 // 10hrs -1500 

DECLARE
  c1 CURSOR FOR SELECT TABLE_NAME FROM MX_PRD.SNF_TEST.SNF_TableList; 
  TblName string;
BEGIN
  FOR record IN c1 DO
    TblName := record.TABLE_NAME;
    CALL MATRIXCARE_US_SECURE_PRD.SNF_TEST.SNF_Process_ClientUsage(:TblName);
  END FOR;
  RETURN 'Client data inserted!';
END;



--------------


SELECT * FROM SNF_Process_ClientUsage; // 96021.9516 Total PRD GB

// Snowflake Database Size GB - Over Time 

// 2 dont have customerid - in PRD tables

SELECT
  ROUND(SUM(ACTIVE_BYTES + TIME_TRAVEL_BYTES + FAILSAFE_BYTES + RETAINED_FOR_CLONE_BYTES
            ) / (1024 * 1024 * 1024),
            4) AS total_size
FROM
  SNOWFLAKE.ACCOUNT_USAGE.TABLE_STORAGE_METRICS
WHERE TABLE_SCHEMA = 'SNF_ODS_SECURE' AND
  TABLE_CATALOG = 'MX_PRD' ;

  // 96021.9516 GB bytes  
  
WITH IndividualMetrics AS (
    SELECT
        SUM(ACTIVE_BYTES) AS TOTAL_ACTIVE_BYTES,
        SUM(TIME_TRAVEL_BYTES) AS TOTAL_TIME_TRAVEL_BYTES,
        SUM(FAILSAFE_BYTES) AS TOTAL_FAILSAFE_BYTES,
        SUM(RETAINED_FOR_CLONE_BYTES) AS TOTAL_RETAINED_FOR_CLONE_BYTES
    FROM
        SNOWFLAKE.ACCOUNT_USAGE.TABLE_STORAGE_METRICS
    WHERE
        TABLE_SCHEMA = 'SNF_ODS_SECURE'
        AND TABLE_CATALOG = 'MX_PRD'
),
TotalDBSize AS (
    SELECT
        ROUND(
            (
                TOTAL_ACTIVE_BYTES + TOTAL_TIME_TRAVEL_BYTES + TOTAL_FAILSAFE_BYTES + TOTAL_RETAINED_FOR_CLONE_BYTES
            ) / (1024 * 1024 * 1024),
            4
        ) AS Total_DB_GB_Size
    FROM
        IndividualMetrics
)

SELECT 
  CLIENTREADERACCOUNTNAME, 
  CUSTOMERID,
  SUM(CLIENT_TABLE_GB_USAGE) AS TOTAL_TABLE_GB_USAGE, 
  ROUND(SUM(CLIENT_TABLE_GB_USAGE) / TotalDBSize.Total_DB_GB_Size, 2) AS USAGE_RATIO
FROM 
  SNF_Process_ClientUsage
CROSS JOIN TotalDBSize
WHERE 
  customerid IN ('18618', '6768', '51446')
GROUP BY 
  CUSTOMERID, CLIENTREADERACCOUNTNAME, TotalDBSize.Total_DB_GB_Size;




// Query Costs

select * from VW_QUERY_COSTS;

CREATE VIEW VW_QUERY_COSTS AS 
SELECT 
    Q.QUERY_ID,
    Q.WAREHOUSE_NAME, 
    Q.START_TIME,
    Q.END_TIME,
    TIMESTAMPDIFF('seconds', Q.START_TIME, Q.END_TIME) AS QUERY_DURATION, -- Calculating duration in seconds
   Q.QUERY_TEXT,
    ROUND(Q.CREDITS_USED_CLOUD_SERVICES, 9) AS CREDITS_USED_CLOUD_SERVICES -- Formatting to 9 decimal places
FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY Q 
JOIN SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY W 
ON Q.WAREHOUSE_ID = W.WAREHOUSE_ID
WHERE Q.WAREHOUSE_NAME IS NOT NULL;

// Reader Account Queries  - - already created 

SELECT * FROM VW_READER_ACCOUNT_QUERY_COSTS LIMIT 5;

SELECT * FROM VW_READER_ACCOUNT_WAREHOUSE_COSTS LIMIT 5;

// Aggregated Query for 3 SNF_Client TableUsage

SELECT 
  CLIENTREADERACCOUNTNAME, 
  --TABLE_NAME, 
  CUSTOMERID,
  --CLIENT_ROWS,
  --SUM(CLIENT_RATIO),
  --CLIENT_TABLE_GB_USAGE, 
  SUM(CLIENT_TABLE_GB_USAGE) AS TOTAL_CLIENT_TABLE_GB_USAGE-- OVER (PARTITION BY CLIENTREADERACCOUNTNAME,CUSTOMERID) AS TOTAL_CLIENT_TABLE_GB_USAGE
FROM 
  SNF_TEST.SNF_Process_ClientUsage 
WHERE 
  customerid IN ('18618','6768','51446') GROUP BY CLIENTREADERACCOUNTNAME,CUSTOMERID;


  // Aggregated Total TB Usage for the 3 clients

  SELECT 
  CLIENTREADERACCOUNTNAME CLIENT_NAME, 
  CUSTOMERID CUSTOMER_ID,
  COUNT(*) SNF_ODS_SECURE_TABLECOUNT,
  ROUND(SUM(CLIENT_TABLE_GB_USAGE)/1000,2) AS TOTAL_CLIENT_TB_USAGE
FROM 
  SNF_TEST.SNF_Process_ClientUsage 
WHERE 
  customerid IN ('18618','6768','51446') GROUP BY CLIENTREADERACCOUNTNAME,CUSTOMERID;


SELECT CLIENTREADERACCOUNTNAME, 
CUSTOMERID,SUM(ROUND(CLIENT_RATIO,4)) TOTAL_CLIENT_RATIO,SUM(ROUND(CLIENT_TABLE_GB_USAGE,4)) CLIENT_TABLE_GB_USAGE
FROM SNF_Process_ClientUsage GROUP BY CLIENTREADERACCOUNTNAME,CUSTOMERID;

  //  Individual Table Ratio and GB Usage for PRUITTHEALTH
SELECT CLIENTREADERACCOUNTNAME, TABLE_NAME, 
CUSTOMERID,CLIENT_ROWS,ROUND(CLIENT_RATIO,4) CLIENT_RATIO,ROUND(CLIENT_TABLE_GB_USAGE,4) CLIENT_TABLE_GB_USAGE
FROM SNF_Process_ClientUsage 
WHERE lower(CLIENTREADERACCOUNTNAME)=lower('PPH') AND customerid='18618';

//  Individual Table Ratio and GB Usage for AHC
SELECT CLIENTREADERACCOUNTNAME, TABLE_NAME, 
CUSTOMERID,CLIENT_ROWS,ROUND(CLIENT_RATIO,4) CLIENT_RATIO,ROUND(CLIENT_TABLE_GB_USAGE,4) CLIENT_TABLE_GB_USAGE
FROM SNF_Process_ClientUsage 
WHERE lower(CLIENTREADERACCOUNTNAME)=lower('AAHC') AND customerid='6768';

//  Individual Table Ratio and GB Usage for ROCKYMOUNTAINCARE
SELECT CLIENTREADERACCOUNTNAME, TABLE_NAME, 
CUSTOMERID,CLIENT_ROWS,ROUND(CLIENT_RATIO,4) CLIENT_RATIO,ROUND(CLIENT_TABLE_GB_USAGE,4) CLIENT_TABLE_GB_USAGE 
FROM SNF_Process_ClientUsage 
WHERE lower(CLIENTREADERACCOUNTNAME)=lower('RMC') AND customerid='51446';

SELECT * FROM SNF_Process_ClientUsage order by CLIENT_TABLE_GB_USAGE desc;



// Reader Account - Query costs for 3 HH Clients 

SELECT R.clientreaderaccountname,R.CLIENTREADERACCOUNTLOCATOR,COUNT(*) TOTAL_QUERIES_EXECUTED,
ROUND(SUM(R.EXECUTION_TIME)/3600,2) TOTAL_EXECUTION_TIME_IN_HRS,
ROUND(SUM(R.TOTAL_ELAPSED_TIME)/3600,2) TOTAL_ELAPSED_TIME_IN_HRS,
ROUND(SUM(R.CREDITS_USED_CLOUD_SERVICES),4) TOTAL_CREDITS_USED_CLOUD_SERVICES
FROM MATRIXCARE_US_SECURE_PRD.SNF_TEST.VW_READER_ACCOUNT_QUERY_COSTS R WHERE UPPER(CLIENTREADERACCOUNTNAME) in ('PRUITTHEALTH','ADVANCEDHEALTHCARECORPORATION','ROCKYMOUNTAINCARE') GROUP BY R.CLIENTREADERACCOUNTNAME,R.CLIENTREADERACCOUNTLOCATOR;


CREATE VIEW VW_READER_ACCOUNT_WAREHOUSE_COSTS AS
SELECT 
S.CLIENTREADERACCOUNTNAME,
S.CLIENTREADERACCOUNTLOCATOR,Q.WAREHOUSE_ID,Q.WAREHOUSE_NAME,Q.CREDITS_USED,Q.CREDITS_USED_COMPUTE,Q.CREDITS_USED_CLOUD_SERVICES,
ROUND(TIMESTAMPDIFF('hours', Q.START_TIME, Q.END_TIME),2) AS USAGE_DURATION 
FROM  SNOWFLAKE.READER_ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY Q
INNER JOIN SNF_CLIENTS S ON Q.READER_ACCOUNT_NAME=S.CLIENTREADERACCOUNTLOCATOR
AND WAREHOUSE_NAME IS NOT NULL
AND Q.READER_ACCOUNT_NAME IS NOT NULL;




// add total Database size and find ratio for each client

  
SELECT 
  CLIENTREADERACCOUNTNAME, 
  CUSTOMERID,
  SUM(CLIENT_TABLE_GB_USAGE) AS TOTAL_TABLE_GB_USAGE, 
  ROUND(SUM(CLIENT_TABLE_GB_USAGE) / TotalDBSize.Total_DB_GB_Size, 2) AS USAGE_RATIO
FROM 
  SNF_Process_ClientUsage
CROSS JOIN TotalDBSize
WHERE 
  customerid IN ('18618', '6768', '51446')
GROUP BY 
  CUSTOMERID, CLIENTREADERACCOUNTNAME, TotalDBSize.Total_DB_GB_Size;



// For each Client - Table wise Usage 

SELECT DISTINCT CLIENTREADERACCOUNTNAME, TABLE_NAME, 
CUSTOMERID,CLIENT_ROWS,CLIENT_RATIO,CLIENT_TABLE_GB_USAGE
FROM SNF_Process_ClientUsage 
WHERE lower(CLIENTREADERACCOUNTNAME)=lower('PHH') AND customerid='18618';

SELECT DISTINCT CLIENTREADERACCOUNTNAME, TABLE_NAME, 
CUSTOMERID,CLIENT_ROWS,CLIENT_RATIO,CLIENT_TABLE_GB_USAGE
FROM SNF_Process_ClientUsage 
WHERE lower(CLIENTREADERACCOUNTNAME)=lower('AAHC') AND customerid='6768';


SELECT DISTINCT CLIENTREADERACCOUNTNAME, TABLE_NAME, 
CUSTOMERID,CLIENT_ROWS,CLIENT_RATIO,CLIENT_TABLE_GB_USAGE 
FROM SNF_Process_ClientUsage 
WHERE lower(CLIENTREADERACCOUNTNAME)=lower('RMC') AND customerid='51446';


// Reader Account - Query costs for 3 HH Clients 

SELECT DISTINCT R.clientreaderaccountname,R.CLIENTREADERACCOUNTLOCATOR,COUNT(*) TOTAL_QUERIES_EXECUTED,
ROUND(SUM(R.EXECUTION_TIME)/3600000,2) TOTAL_EXECUTION_TIME_IN_HRS,
ROUND(SUM(R.TOTAL_ELAPSED_TIME)/3600000,2) TOTAL_ELAPSED_TIME_IN_HRS,
ROUND(SUM(R.CREDITS_USED_CLOUD_SERVICES),4) TOTAL_CREDITS_USED_CLOUD_SERVICES
FROM MATRIXCARE_US_SECURE_PRD.SNF_TEST.VW_READER_ACCOUNT_QUERY_COSTS R WHERE UPPER(CLIENTREADERACCOUNTNAME) in ('PRUITTHEALTH','ADVANCEDHEALTHCARECORPORATION','ROCKYMOUNTAINCARE') GROUP BY R.CLIENTREADERACCOUNTNAME,R.CLIENTREADERACCOUNTLOCATOR;
